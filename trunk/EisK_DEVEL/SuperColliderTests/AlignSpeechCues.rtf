{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf420
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red96\green96\blue96;\red0\green115\blue0;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 e = \cf3 Eisenkraut\cf2 .default;\
e.addr.connect;\
\
\cf4 // expand selection to align to integer seconds\cf2 \
(\
\cf3 var\cf2  cueDur = 1.5; \cf4 // seconds;\cf2 \
\cf3 var\cf2  mark = \cf3 true\cf2 ;\
w = \cf3 JSCWindow\cf2 ( \cf5 "Align"\cf2 , \cf3 Rect\cf2 ( 800, 100, 100, 40 ), resizable: \cf3 false\cf2 , server: e.swing );\
\cf3 JSCButton\cf2 ( w, \cf3 Rect\cf2 ( 4, 4, 80, 20 )).states_([[ \cf5 "Next Cue"\cf2  ]] ).canFocus_( \cf3 false\cf2  ).action_(\{ \cf3 arg\cf2  b;\
fork \{\
	\cf3 var\cf2  msg, rate, num, startIdx, stopIdx, start, stop, frames;\
	msg = e.query( \cf6 '/doc/active/timeline'\cf2 , [ \cf6 \\rate\cf2 , \cf6 \\position\cf2  ]);\
	if( msg.notNil, \{\
\cf4 //		msg.postln;\cf2 \
		start	= msg[1];\
		frames	= (cueDur * msg[0] + 0.5).asInteger;\
		stop  	= (start + frames - 1);\
		frames	= stop - (stop % frames) - start;\
		[ start, frames ].postln;\
		if( mark, \{ e.sendMsg( \cf6 '/doc/active/markers'\cf2 , \cf6 \\add\cf2 , start, \cf5 "Mark"\cf2  )\});\
		if( frames > 0, \{\
			e.sendMsg( \cf6 '/doc/active'\cf2 , \cf6 \\insertSilence\cf2 , frames );\
		\}, \{\
			\cf5 "Already aligned!"\cf2 .warn;\
		\});\
	\}, \{\
		\cf5 "timeout"\cf2 .warn;\
	\});\
\}\
\});\
w.front;\
)\
\
\
\cf7 // trunc end of selection\cf0 \
(\
\cf8 var\cf0  cueDur = 1.5; \cf7 // seconds;\cf0 \
\cf8 var\cf0  mark = \cf8 true\cf0 ;\
w = \cf8 JSCWindow\cf0 ( \cf9 "Align"\cf0 , \cf8 Rect\cf0 ( 800, 100, 100, 40 ), resizable: \cf8 false\cf0 , server: e.swing );\
\cf8 JSCButton\cf0 ( w, \cf8 Rect\cf0 ( 4, 4, 80, 20 )).states_([[ \cf9 "Trunc"\cf0  ]] ).canFocus_( \cf8 false\cf0  ).action_(\{ \cf8 arg\cf0  b;\
fork \{\
	\cf8 var\cf0  msg, rate, num, startIdx, stopIdx, start, stop, frames;\
	msg = e.query( \cf10 '/doc/active/timeline'\cf0 , [ \cf10 \\rate\cf0 , \cf10 \\selectionStart, \\selectionStop\cf0  ]);\
	if( msg.notNil, \{\
\cf7 //		msg.postln;\cf0 \
		start	= msg[1];\
		frames	= (cueDur * msg[0] + 0.5).asInteger;\
		stop  	= start + frames;\
		frames	= msg[2] - stop;\
		[ start, frames ].postln;\
		if( frames > 0, \{\
			e.sendMsg( \cf10 '/doc/active/timeline'\cf0 , \cf10 \\select\cf0 , stop, stop + frames );\
			e.sendMsg( \cf10 '/doc/active'\cf0 , \cf10 \\delete\cf0  );\
		\}, \{\
			\cf9 "Too small!"\cf0 .warn;\
		\});\
	\}, \{\
		\cf9 "timeout"\cf0 .warn;\
	\});\
\}\
\});\
w.front;\
)\
}