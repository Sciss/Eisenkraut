{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf440
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 // 05-aug-07\cf0 \
\
e = \cf3 Eisenkraut\cf0 .default;\
e.connect;\
\cf2 //fork \{ e.initTree \};\cf0 \
\cf2 //fork \{\'cae.initSwing \};\cf0 \
\cf2 //e.swing.addr\
//e.swing.addr.isConnected\cf0 \
\
e.swing.dumpOSC(1);\
e.swing.dumpOSC(0);\
\
\cf2 // WARNING : fails if scsynth wasn't yet booted!\cf0 \
\
(\
\cf3 var\cf0  headerSuffix, ggTimer, ggChannelOffset, ggNumChannels, channelOffset = 0, numChannels = 2, headerFormat = \cf4 "aiff"\cf0 , ggHeaderFormat, ggSampleFormat, sampleFormat = \cf4 "float"\cf0 , folder, ggFolder, ggFile, file = \cf4 ""\cf0 , autoFile = \cf3 true\cf0 ;\
\
x = \cf3 EisKPlugIn\cf0 .new.name_( \cf4 "Control Room Recorder"\cf0  );\
e.addProcessPlugIn( x );\
fork \{ e.initTree; \};\
\
headerSuffix		= \cf3 IdentityDictionary\cf0 .new;\
headerSuffix.put( \cf5 \\aiff\cf0 , \cf4 "aif"\cf0  );\
headerSuffix.put( \cf5 \\next\cf0 , \cf4 "au"\cf0  );\
headerSuffix.put( \cf5 \\wav\cf0 , \cf4 "wav"\cf0  );\
headerSuffix.put( \cf5 \\ircam\cf0 , \cf4 "irc"\cf0  );\
headerSuffix.put( \cf5 \\raw\cf0 , \cf4 "raw"\cf0  );\
\
folder = \cf4 "~/Desktop"\cf0 .standardizePath ++ \cf4 "/"\cf0 ;\
\
x.populateWindowFunc = \{ \cf3 arg\cf0  plug, win;\
	\cf3 var\cf0  flow, gui, headerFormats, sampleFormats;\
\
if( \cf3 true\cf0 , \{\
	\
	("win.server.addr : "++win.server.addr).postln;\
	\
	gui = \cf3 GUI\cf0 .current;\
	win.bounds_( win.bounds.resizeTo( 368, 156 ));\
	\
	flow = \cf3 FlowLayout\cf0 ( win.view.bounds );\
	win.view.decorator = flow;\
	\
	\cf3 GUI\cf0 .staticText.new( win, \cf3 Rect\cf0 ( 0, 0, 48, 24 ))\
		.align_( \cf5 \\right\cf0  )\
		.string_( \cf4 "Folder"\cf0  );\
\pard\pardeftab560\ql\qnatural
\cf0 \
	ggFolder = \cf3 GUI\cf0 .dragSink.new( win, \cf3 Rect\cf0 ( 0, 0, 280, 20 ))\
\pard\pardeftab560\ql\qnatural
\cf2 //		.resize_( 2 )\cf0 \
		.object_( folder )\
		.action_(\{ \cf3 arg\cf0  b;\
			folder = b.object;\
		\});\
	\cf3 GUI\cf0 .button.new( win, \cf3 Rect\cf0 ( 0, 0, 20, 20 ))\
\cf2 //		.resize_( 3 )\cf0 \
		.states_([[ \cf4 "..."\cf0  ]])\
		.canFocus_( \cf3 false\cf0  )\
		.action_(\{ \cf3 arg\cf0  b;\
			\cf3 GUI\cf0 .use( gui, \{\
				\cf3 GUI\cf0 .dialog.
\fs20 savePanel
\fs18 (\{ \cf3 arg\cf0  path;\
					ggFolder.object = path;\
					ggFolder.doAction;\
				\});\
			\});\
		\});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
	flow.nextLine;\
\
	\cf3 GUI\cf0 .staticText.new( win, \cf3 Rect\cf0 ( 0, 0, 48, 24 ))\
		.align_( \cf5 \\right\cf0  )\
		.string_( \cf4 "File"\cf0  );\
\
\pard\pardeftab560\ql\qnatural
\cf0 	ggFile = \cf3 GUI\cf0 .textField.new( win, \cf3 Rect\cf0 ( 0, 0, 260, 20 ))\
\pard\pardeftab560\ql\qnatural
\cf2 //		.resize_( 2 )\cf0 \
\cf2 //		.object_( file )\cf0 \
		.enabled_( autoFile.not )\
		.action_(\{ \cf3 arg\cf0  b;\
			file = b.object;\
		\});\
	\cf3 GUI\cf0 .button.new( win, \cf3 Rect\cf0 ( 0, 0, 40, 20 ))\
\cf2 //		.resize_( 3 )\cf0 \
		.states_([[ \cf4 "Auto"\cf0  ], [ \cf4 "Auto"\cf0 , \cf3 Color\cf0 .white, \cf3 Color\cf0 .blue ]])\
		.canFocus_( \cf3 false\cf0  )\
		.value_( autoFile.binaryValue )\
		.action_(\{ \cf3 arg\cf0  b;\
			autoFile = b.value == 1;\
			ggFile.enabled( autoFile.not );\
		\});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
	flow.nextLine;\
	\cf3 GUI\cf0 .staticText.new( win, \cf3 Rect\cf0 ( 0, 0, 48, 24 ))\
		.align_( \cf5 \\right\cf0  )\
		.string_( \cf4 "Format"\cf0  );\
\
	headerFormats = headerSuffix.keys.asArray.performUnaryOp( \cf5 \\asString\cf0  ).sort;\
\
	ggHeaderFormat = \cf3 GUI\cf0 .popUpMenu.new( win, \cf3 Rect\cf0 ( 0, 0, 80, 24 ))\
\pard\pardeftab560\ql\qnatural
\cf0 		.canFocus_( \cf3 false\cf0  )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 		.items_( headerFormats )\
\cf2 //		.value_( headerFormats.indexOf( headerFormat ))\cf0 \
		.value_( headerFormats.collect(\{ \cf3 arg\cf0  item, idx; if( item == headerFormat, idx, -1 )\}).maxItem )\
		.action_(\{ \cf3 arg\cf0  b;\
			headerFormat = headerFormats[ b.value ];\
		\});\
\
	sampleFormats = [ \cf4 "int16"\cf0 , \cf4 "int24"\cf0 , \cf4 "int32"\cf0 , \cf4 "float"\cf0  ];\
	ggSampleFormat = \cf3 GUI\cf0 .popUpMenu.new( win, \cf3 Rect\cf0 ( 0, 0, 80, 24 ))\
\pard\pardeftab560\ql\qnatural
\cf0 		.canFocus_( \cf3 false\cf0  )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 		.items_( sampleFormats )\
\cf2 //		.value_( sampleFormats.indexOf( sampleFormat ))\cf0 \
		.value_( sampleFormats.collect(\{ \cf3 arg\cf0  item, idx; if( item == sampleFormat, idx, -1 )\}).maxItem )\
		.action_(\{ \cf3 arg\cf0  b;\
			sampleFormat = sampleFormats[ b.value ];\
		\});\
	~ggSampleFormat = ggSampleFormat;\
\
	flow.nextLine;\
\
	\cf3 GUI\cf0 .staticText.new( win, \cf3 Rect\cf0 ( 0, 0, 48, 24 ))\
		.align_( \cf5 \\right\cf0  )\
		.string_( \cf4 "Bus"\cf0  );\
\
	ggChannelOffset = \cf3 GUI\cf0 .numberBox.new( win, \cf3 Rect\cf0 ( 0, 0, 36, 24 ))\
		.align_( \cf5 \\right\cf0  )\
		.object_( channelOffset )\
		.action_(\{ \cf3 arg\cf0  b;\
			channelOffset = b.value.asInteger;\
		\});\
		\
	\cf3 GUI\cf0 .staticText.new( win, \cf3 Rect\cf0 ( 0, 0, 48, 24 ))\
		.align_( \cf5 \\right\cf0  )\
		.string_( \cf4 "Chans"\cf0  );\
\
	ggNumChannels = \cf3 GUI\cf0 .numberBox.new( win, \cf3 Rect\cf0 ( 0, 0, 36, 24 ))\
		.align_( \cf5 \\right\cf0  )\
		.object_( numChannels )\
		.action_(\{ \cf3 arg\cf0  b;\
			numChannels = b.value.asInteger;\
		\});\
			\
	flow.nextLine;\
	flow.shift( 48, 8 );\
\
	~ggRec = \cf3 GUI\cf0 .button.new( win, \cf3 Rect\cf0 ( 0, 0, 80, 24 ))\
		.states_([[ \cf4 "Rec"\cf0  ]])\
		.action_(\{ \cf3 arg\cf0  b;\
			\cf3 var\cf0  path, target, targetAddAction;\
			b.enabled = \cf3 false\cf0 ;\
			\{\
				target			= \cf3 nil\cf0 ;\
				targetAddAction	= \cf5 \\addToTail\cf0 ;\
		\cf2 //		folder = "recordings/";\cf0 \
				if( autoFile, \{\
					file = \cf4 "SC_"\cf0  ++ \cf3 Date\cf0 .localtime.stamp ++ \cf4 "."\cf0  ++ headerSuffix[ headerFormat.asSymbol ];\
					ggFile.object = file;\
				\});\
				path = folder ++ file;\
				~buf = \cf3 EisKBuffer\cf0 .alloc( e.scsynth, 65536, numChannels );\
				~buf.write( path, headerFormat, sampleFormat, 0, 0, \cf3 true\cf0  );\
				\cf3 SynthDef\cf0 ( \cf4 "simpleRecorder"\cf0  ++ numChannels, \{ \cf3 arg\cf0  i_bus, i_buf;\
					\cf3 DiskOut\cf0 .ar( i_buf, \cf3 In\cf0 .ar( i_bus, numChannels )); \
				\}).send( e.scsynth );\
				e.scsynth.sync;\
				~node = \cf3 Synth\cf0 ( \cf4 "simpleRecorder"\cf0  ++ ~buf.numChannels, [ \cf5 \\i_buf\cf0 ,  ~buf.bufnum,\
					\cf5 \\i_bus\cf0 , channelOffset ], target ?? \{ \cf3 RootNode\cf0 ( e.scsynth )\}, targetAddAction );\
				~ggStop.enabled = \cf3 true\cf0 ;\
			\}.fork( \cf3 AppClock\cf0  );\
		\});\
	~ggStop = \cf3 GUI\cf0 .button.new( win, \cf3 Rect\cf0 ( 0, 0, 80, 24 ))\
		.states_([[ \cf4 "Stop"\cf0  ]])\
		.enabled_( \cf3 false\cf0  )\
		.action_(\{ \cf3 arg\cf0  b;\
			b.enabled = \cf3 false\cf0 ;\
			~node.free;\
			~node = \cf3 nil\cf0 ;\
			if( ~buf.notNil, \{\
				~buf.close(\{ \cf3 arg\cf0  buf; buf.free; \});\
				~buf = \cf3 nil\cf0 ; \
			\});\
			~ggRec.enabled = \cf3 true\cf0 ;\
		\});\
\
	ggTimer = \cf3 GUI\cf0 .staticText.new( win, \cf3 Rect\cf0 ( 0, 0, 72, 24 ))\
		.string_( \cf4 "00:00:00"\cf0  );\
	\
\});\
\};\
)\
}